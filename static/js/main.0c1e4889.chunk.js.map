{"version":3,"sources":["card.jsx","deck.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","value","Math","random","deg","_transform","style","transform","this","className","src","image","alt","React","Component","url","Deck","state","response","cardArray","getCard","bind","a","axios","get","res","setState","data","deck_id","card","success","Error","newCard","cards","prevState","id","code","suit","alert","map","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2VAwBeA,E,kDApBb,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GAEN,IAAIC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAsB,GAAhBF,KAAKC,SAAgB,GAJd,OAMjB,EAAKE,WAAL,oBAA+BJ,EAA/B,eAA2CA,EAA3C,sBAA8DG,EAA9D,QANiB,E,0CAQnB,WACE,OACE,qBACEE,MAAO,CAAEC,UAAWC,KAAKH,YACzBI,UAAU,OACVC,IAAKF,KAAKR,MAAMW,MAChBC,IAAKJ,KAAKR,MAAMY,U,GAfLC,IAAMC,WCCrBC,G,MAAM,uCAEJC,E,kDACJ,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAEDiB,MAAQ,CACXC,SAAU,GACVC,UAAW,IAGb,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBARE,E,4FAWnB,4BAAAC,EAAA,sEACkBC,IAAMC,IAAN,UAAaT,EAAb,iBADlB,OACMU,EADN,OAEEjB,KAAKkB,SAAS,CAAER,SAAUO,EAAIE,OAFhC,gD,kHAKA,8BAAAL,EAAA,+EAEqBC,IAAMC,IAAN,UAAaT,EAAb,YAAoBP,KAAKS,MAAMC,SAASU,QAAxC,WAFrB,WAEQC,EAFR,QAGcF,KAAKG,QAHnB,sBAIY,IAAIC,MAJhB,OAMQC,EAAUH,EAAKF,KAAKM,MAAM,GAE9BzB,KAAKkB,UAAS,SAACQ,GAAD,MAAgB,CAC5Bf,UAAU,GAAD,mBACJe,EAAUf,WADN,CAEP,CACEgB,GAAIH,EAAQI,KACZzB,MAAOqB,EAAQrB,MACfC,IAAI,GAAD,OAAKoB,EAAQ/B,MAAb,eAAyB+B,EAAQK,aAd9C,kDAmBIC,MAAM,2BAnBV,0D,0EAuBA,WACE,IAAIL,EAAQzB,KAAKS,MAAME,UAAUoB,KAAI,SAACV,GAAD,OACnC,cAAC,EAAD,CAAoBlB,MAAOkB,EAAKlB,MAAOC,IAAKiB,EAAKjB,KAAtCiB,EAAKM,OAElB,OACE,sBAAK1B,UAAU,OAAf,UACE,6CACA,iEACA,sBAAKA,UAAU,iBAAf,cAAkCwB,KAClC,wBAAQxB,UAAU,WAAW+B,QAAShC,KAAKY,QAA3C,6B,GAjDWP,IAAMC,WAyDVE,ICpDAyB,MARf,WACE,OACE,qBAAKhC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0c1e4889.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nclass Card extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let value = Math.random() * 40 - 20;\r\n    let deg = Math.random() * 90 - 45;\r\n\r\n    this._transform = `translate(${value}px, ${value}px) rotate(${deg}deg)`;\r\n  }\r\n  render() {\r\n    return (\r\n      <img\r\n        style={{ transform: this._transform }}\r\n        className=\"card\"\r\n        src={this.props.image}\r\n        alt={this.props.alt}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Card from \"./card\";\r\nimport \"./deck.css\";\r\nlet url = \"https://deckofcardsapi.com/api/deck\";\r\n\r\nclass Deck extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      response: {},\r\n      cardArray: [],\r\n    };\r\n\r\n    this.getCard = this.getCard.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let res = await axios.get(`${url}/new/shuffle`);\r\n    this.setState({ response: res.data });\r\n  }\r\n\r\n  async getCard() {\r\n    try {\r\n      let card = await axios.get(`${url}/${this.state.response.deck_id}/draw/`);\r\n      if (!card.data.success) {\r\n        throw new Error();\r\n      }\r\n      let newCard = card.data.cards[0];\r\n\r\n      this.setState((prevState) => ({\r\n        cardArray: [\r\n          ...prevState.cardArray,\r\n          {\r\n            id: newCard.code,\r\n            image: newCard.image,\r\n            alt: `${newCard.value} of ${newCard.suit}`,\r\n          },\r\n        ],\r\n      }));\r\n    } catch (err) {\r\n      alert(\"All cards already drawn\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let cards = this.state.cardArray.map((card) => (\r\n      <Card key={card.id} image={card.image} alt={card.alt} />\r\n    ));\r\n    return (\r\n      <div className=\"deck\">\r\n        <h1> Cards Pool</h1>\r\n        <h2> A little demo made with React </h2>\r\n        <div className=\"card-container\"> {cards}</div>\r\n        <button className=\"deck-btn\" onClick={this.getCard}>\r\n          Get Card\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Deck;\r\n","import \"./App.css\";\nimport Deck from \"./deck\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}